plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
    modImplementation "dev.emi:trinkets:${rootProject.trinkets_version}"
    modImplementation "io.github.apace100:apoli:${rootProject.apoli_version}"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${rootProject.cardinal_components_version}"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${rootProject.cardinal_components_version}"
    modImplementation "maven.modrinth:additionalentityattributes:${rootProject.additional_entity_attributes_version}"
    modImplementation "org.figuramc:figura-fabric:${rootProject.figura_version}"
    implementation "com.github.FiguraMC.luaj:luaj-core:${rootProject.luaj_version}-figura"
    implementation "com.github.FiguraMC.luaj:luaj-jse:${rootProject.luaj_version}-figura"
    implementation "com.neovisionaries:nv-websocket-client:${rootProject.nv_websocket_version}"
    modApi(include("fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${rootProject.fcap_version}"))
    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation("com.terraformersmc:modmenu:${rootProject.modmenu_version}")
}

processResources {
    var replaceProperties = [
            mod_id: mod_id,
            mod_name: mod_name,
            mod_version: mod_version,
            mod_license: mod_license,
            mod_description: mod_description,
            minecraft_version: minecraft_version,
            architectury_version: architectury_version
    ]
    inputs.properties replaceProperties
    filesMatching("fabric.mod.json") {
        expand replaceProperties + [project: project]
    }
}

shadowJar {
    exclude "architectury.common.json"
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }
    repositories {
    }
}