plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
        mixinConfig "mermod-common.mixins.json"
        mixinConfig "mermod.mixins.json"
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.neoforged:forge:${rootProject.forge_version}"
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
    modImplementation "top.theillusivec4.curios:curios-forge:${rootProject.curios_version}"
    modImplementation "org.figuramc:figura-forge:${rootProject.figura_version}"
    forgeRuntimeLibrary "com.github.FiguraMC.luaj:luaj-core:${rootProject.luaj_version}-figura"
    forgeRuntimeLibrary "com.github.FiguraMC.luaj:luaj-jse:${rootProject.luaj_version}-figura"
    forgeRuntimeLibrary "com.neovisionaries:nv-websocket-client:${rootProject.nv_websocket_version}"
    modImplementation "me.shedaniel.cloth:cloth-config-forge:${rootProject.cloth_config_version}"
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.5"))
    implementation(include("io.github.llamalad7:mixinextras-forge:0.3.5"))
    modImplementation "io.github.edwinmindcraft:origins-forge:${rootProject.origins_forge_version}"
    modImplementation "io.github.edwinmindcraft:apoli-forge:${rootProject.apoli_forge_version}"
    modImplementation "io.github.edwinmindcraft:calio-forge:${rootProject.calio_forge_version}"
    modImplementation "top.theillusivec4.caelus:caelus-forge:${rootProject.caelus_version}"
    modImplementation "maven.modrinth:additionalentityattributes-forge:${rootProject.aea_forge_version}"
}

processResources {
    var replaceProperties = [
            mod_id: mod_id,
            mod_name: mod_name,
            mod_version: mod_version,
            mod_license: mod_license,
            mod_description: mod_description,
            minecraft_version_range: minecraft_version_range,
            forge_version_range: forge_version_range,
            architectury_version: architectury_version
    ]
    inputs.properties replaceProperties
    filesMatching("META-INF/mods.toml") {
        expand replaceProperties + [project: project]
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }
    repositories {
    }
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}